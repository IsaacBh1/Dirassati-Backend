@startuml Update Student Process
title Update Student Process

start
:Administrator requests to update student;
:System fetches current student data;
:Administrator modifies student details;

:System validates input format;
if (Format valid?) then (yes)
  :Extract school ID from user claims;
  :Verify authorization for student;
  
  if (Authorized?) then (yes)
    :Begin transaction;
    
    ' Core student data update
    if (Personal information updated?) then (yes)
      :Update name, birth date, address, etc.;
    endif
    
    if (Contact information updated?) then (yes)
      :Update phone number, email, etc.;
    endif
    
    if (School level changed?) then (yes)
      :Verify new school level exists;
      if (Level valid?) then (yes)
        :Update student school level;
        
        ' Handle group change implications
        :Check if current group matches new level;
        if (Group level mismatch?) then (yes)
          :Remove student from current group;
          :Flag student needs new group assignment;
        endif
      else (no)
        :Return "Invalid school level" error;
        :Rollback transaction;
        stop
      endif
    endif
    
    ' Parent handling
    if (Parent information updated?) then (yes)
      if (New parent assignment?) then (yes)
        :Check if new parent exists;
        if (Parent exists?) then (yes)
          :Update parent-student relationship;
        else (no)
          :Create new parent record;
          :Generate parent user account;
          :Send welcome email to parent;
          :Link student to new parent;
        endif
      else (no)
        :Update existing parent information;
      endif
    endif
    
    ' Group handling  
    if (Group assignment updated?) then (yes)
      if (Removing from group?) then (yes)
        :Remove group assignment;
      else (assigning to new group)
        :Verify group exists;
        if (Group exists?) then (yes)
          :Check group capacity;
          if (Group has capacity?) then (yes)
            :Assign student to group;
          else (no)
            :Return "Group at capacity" error;
            :Rollback transaction;
            stop
          endif
        else (no)
          :Return "Group not found" error;
          :Rollback transaction;
          stop
        endif
      endif
    endif
    
    :Commit transaction;
    :Return updated student data;
    
  else (no)
    :Return authorization error;
  endif
else (no)
  :Return validation errors;
endif

stop
@enduml
