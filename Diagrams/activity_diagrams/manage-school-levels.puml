@startuml Manage School Levels Process
title Manage School Levels Process

start
:Administrator accesses school level management;

' List existing levels
:System retrieves school levels;
:Display current level structure;

' Determine action
if (Administrator action?) then (view)
  :Display detailed level information;
  :Show associated groups and students;
  :Show subjects associated with level;
  stop
  
else if (create)
  :Display new level form;
  :Administrator enters level details;
  note right
    Level name, year, sequence,
    education stage, etc.
  end note
  
  :System validates input;
  if (Input valid?) then (yes)
    :Check for duplicate level name;
    if (Name unique?) then (yes)
      :Create new school level;
      :Set level hierarchy position;
      if (Part of specialization?) then (yes)
        :Link level to specialization;
      endif
      :Save level to database;
      :Return success message;
    else (no)
      :Return "Level name must be unique" error;
    endif
  else (no)
    :Return validation errors;
  endif
  
else if (update)
  :Select level to update;
  :Display level edit form;
  :Administrator modifies level details;
  
  :System validates input;
  if (Input valid?) then (yes)
    if (Name changed?) then (yes)
      :Check for duplicate level name;
      if (Name not unique?) then (yes)
        :Return "Level name must be unique" error;
        stop
      endif
    endif
    
    :Update level details;
    
    if (Specialization changed?) then (yes)
      ' Check implications
      :Check for students in this level;
      if (Students exist in level?) then (yes)
        :Display warning about student specialization;
        :Confirm changes;
        if (Changes confirmed?) then (yes)
          :Update specialization link;
        else (no)
          :Cancel specialization change;
        endif
      else (no)
        :Update specialization link;
      endif
    endif
    
    :Save changes to database;
    :Return success message;
    
  else (no)
    :Return validation errors;
  endif
  
else (delete)
  :Select level to delete;
  
  ' Check dependencies
  :Check for students in level;
  :Check for groups in level;
  
  if (Level has dependencies?) then (yes)
    :Display warning about dependencies;
    :Offer to reassign or delete;
    
    if (Action chosen?) then (reassign)
      :Select target level for reassignment;
      :Move students and groups to target level;
      :Update references to level;
    else if (force delete)
      :Administrator confirms deletion with dependencies;
      :Delete level and cascade to dependencies;
    else (cancel)
      :Cancel deletion;
      stop
    endif
  endif
  
  :Delete level from database;
  :Return success message;
endif

stop
@enduml
