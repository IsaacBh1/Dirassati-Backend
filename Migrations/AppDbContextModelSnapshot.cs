// <auto-generated />
using System;
using Dirassati_Backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dirassati_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Dirassati_Backend.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressAdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdresseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressAdresseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Absence", b =>
                {
                    b.Property<Guid>("AbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsJustified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("AbsenceId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AcademicYearId");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Address", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Bill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("BillId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolLevelId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Classroom", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassroomId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.ExamType", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamTypes");

                    b.HasData(
                        new
                        {
                            ExamTypeId = 1,
                            Name = "Devoire1"
                        },
                        new
                        {
                            ExamTypeId = 2,
                            Name = "Devoire2"
                        },
                        new
                        {
                            ExamTypeId = 3,
                            Name = "Examen"
                        },
                        new
                        {
                            ExamTypeId = 4,
                            Name = "Controle Continue"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SchoolLevelLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassroomId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolLevelLevelId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeslotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeslotId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.LevelSubjectHours", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursPerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("LevelId", "SubjectId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.ToTable("LevelSubjectHours");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tremester")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("NoteId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Parent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalIdentityNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParentRelationshipToStudentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Père"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mère"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tuteur légal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Grand-parent"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Oncle/Tante"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Frère/Sœur majeur(e)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Autre famille"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("SchoolId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("BillingCycleDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolConfig")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LevelId");

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("SchoolLevels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            LevelYear = 1,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 2,
                            LevelYear = 2,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 3,
                            LevelYear = 3,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 4,
                            LevelYear = 4,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 5,
                            LevelYear = 5,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 6,
                            LevelYear = 1,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 7,
                            LevelYear = 2,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 8,
                            LevelYear = 3,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 9,
                            LevelYear = 4,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 10,
                            LevelYear = 1,
                            SchoolTypeId = 3
                        },
                        new
                        {
                            LevelId = 11,
                            LevelYear = 2,
                            SchoolTypeId = 3
                        },
                        new
                        {
                            LevelId = 12,
                            LevelYear = 3,
                            SchoolTypeId = 3
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolScheduleConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("AfternoonEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("AfternoonStart")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("DaysOff")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("FullDays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MorningEnd")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MorningStart")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ShortDays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigId");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("SchoolScheduleConfig");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolType", b =>
                {
                    b.Property<int>("SchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolTypeId");

                    b.ToTable("SchoolTypes");

                    b.HasData(
                        new
                        {
                            SchoolTypeId = 1,
                            Name = "Primaire"
                        },
                        new
                        {
                            SchoolTypeId = 2,
                            Name = "Moyenne"
                        },
                        new
                        {
                            SchoolTypeId = 3,
                            Name = "Lycee"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            Name = "Science"
                        },
                        new
                        {
                            SpecializationId = 2,
                            Name = "Lettres"
                        },
                        new
                        {
                            SpecializationId = 3,
                            Name = "Gestion et Économie"
                        },
                        new
                        {
                            SpecializationId = 4,
                            Name = "Mathématiques"
                        },
                        new
                        {
                            SpecializationId = 5,
                            Name = "Sciences Expérimentales"
                        },
                        new
                        {
                            SpecializationId = 6,
                            Name = "Technique Mathématiques - Génie Civil"
                        },
                        new
                        {
                            SpecializationId = 7,
                            Name = "Technique Mathématiques - Génie Électrique"
                        },
                        new
                        {
                            SpecializationId = 8,
                            Name = "Technique Mathématiques - Génie Mécanique"
                        },
                        new
                        {
                            SpecializationId = 9,
                            Name = "Lettres et Philosophie"
                        },
                        new
                        {
                            SpecializationId = 10,
                            Name = "Langues Etrangeres"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentRelationshipToStudentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PhotoUrl")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentIdNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentRelationshipToStudentTypeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentPayment", b =>
                {
                    b.Property<Guid>("BillId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentGatewayCheckoutId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentGatewayTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("BillId", "StudentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentReport", b =>
                {
                    b.Property<Guid>("StudentReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentReportStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentReportId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentReportStatusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentReports");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentReportStatus", b =>
                {
                    b.Property<int>("StudentReportStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentReportStatusId");

                    b.ToTable("StudentReportStatuses");

                    b.HasData(
                        new
                        {
                            StudentReportStatusId = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            StudentReportStatusId = 2,
                            Name = "Sent"
                        },
                        new
                        {
                            StudentReportStatusId = 3,
                            Name = "Viewed"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolType")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Name = "Histoire",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 2,
                            Name = "Géographie",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 3,
                            Name = "Éducation Islamique",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 4,
                            Name = "Éducation Civique",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 5,
                            Name = "Mathématiques",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 7,
                            Name = "Sciences Technologiques",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 8,
                            Name = "Langue Arabe",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 9,
                            Name = "Langue Tamazight",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 10,
                            Name = "Langue Française",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 11,
                            Name = "Langue Anglaise",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 12,
                            Name = "EPS",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 13,
                            Name = "Éducation Artistique",
                            SchoolType = 1
                        },
                        new
                        {
                            SubjectId = 101,
                            Name = "Histoire",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 102,
                            Name = "Géographie",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 103,
                            Name = "Éducation Islamique",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 104,
                            Name = "Éducation Civique",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 105,
                            Name = "Mathématiques",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 106,
                            Name = "Sciences de la Nature et de la Vie",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 107,
                            Name = "Sciences Physiques et Technologiques",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 108,
                            Name = "Langue Arabe",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 109,
                            Name = "Langue Tamazight",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 110,
                            Name = "Langue Française",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 111,
                            Name = "Langue Anglaise",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 112,
                            Name = "EPS",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 113,
                            Name = "Éducation Artistique",
                            SchoolType = 2
                        },
                        new
                        {
                            SubjectId = 201,
                            Name = "Économie et Management",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 202,
                            Name = "Histoire",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 203,
                            Name = "Géographie",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 204,
                            Name = "Gestion Comptabilité et Finances",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 205,
                            Name = "Mathématiques",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 206,
                            Name = "Sciences Islamiques",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 207,
                            Name = "Sciences de la Nature et de la Vie",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 208,
                            Name = "Sciences Physiques",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 209,
                            Name = "Philosophie",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 210,
                            Name = "Droit",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 211,
                            Name = "Espagnol",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 212,
                            Name = "Allemand",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 213,
                            Name = "Anglais",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 214,
                            Name = "Italien",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 215,
                            Name = "Français",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 216,
                            Name = "Arabe",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 217,
                            Name = "Tamazight",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 218,
                            Name = "Informatique",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 219,
                            Name = "Génie des Procédés",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 220,
                            Name = "Génie Électrique",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 221,
                            Name = "Génie Civil",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 222,
                            Name = "Génie Mécanique",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 223,
                            Name = "Éducation Physique et Sportive",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 224,
                            Name = "Éducation Artistique",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 225,
                            Name = "Technologie",
                            SchoolType = 3
                        },
                        new
                        {
                            SubjectId = 226,
                            Name = "Musique",
                            SchoolType = 3
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.TeacherAvailability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherAvailabilities");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Timeslot", b =>
                {
                    b.Property<int>("TimeslotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMorningSlot")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpecialDay")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeslotId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Timeslots", t =>
                        {
                            t.HasCheckConstraint("CK_Timeslot_EndAfterStart", "EndTime > StartTime");
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.ContractType", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContractId");

                    b.ToTable("ContractTypes");

                    b.HasData(
                        new
                        {
                            ContractId = 1,
                            Name = "Contrats Permanents"
                        },
                        new
                        {
                            ContractId = 2,
                            Name = "Contrats à Durée Déterminée"
                        },
                        new
                        {
                            ContractId = 3,
                            Name = "Contrats à Temps Partiel ou Horaire"
                        },
                        new
                        {
                            ContractId = 4,
                            Name = "Stagiaire"
                        },
                        new
                        {
                            ContractId = 5,
                            Name = "Consultant Pédagogique"
                        },
                        new
                        {
                            ContractId = 6,
                            Name = "Bénévole"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolSpecialization", b =>
                {
                    b.Property<Guid>("SchoolsSchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecializationsSpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolsSchoolId", "SpecializationsSpecializationId");

                    b.HasIndex("SpecializationsSpecializationId");

                    b.ToTable("SchoolSpecialization");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("SubjectsSubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeachersTeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectsSubjectId", "TeachersTeacherId");

                    b.HasIndex("TeachersTeacherId");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.AppUser", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressAdresseId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Absence", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithOne("AcademicYear")
                        .HasForeignKey("Dirassati_Backend.Data.Models.AcademicYear", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Bill", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "SchoolLevel")
                        .WithMany("Bills")
                        .HasForeignKey("SchoolLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolLevel");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Classroom", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Classrooms")
                        .HasForeignKey("SchoolId")
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("School");

                    b.Navigation("SchoolLevel");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Employee", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Group", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.AcademicYear", null)
                        .WithMany("Groups")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("Dirassati_Backend.Data.Models.Classroom", "Classroom")
                        .WithOne("Group")
                        .HasForeignKey("Dirassati_Backend.Data.Models.Group", "ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", null)
                        .WithMany("Groups")
                        .HasForeignKey("SchoolLevelLevelId");

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", null)
                        .WithMany("Groups")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Classroom");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Lesson", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Timeslot", "Timeslot")
                        .WithMany()
                        .HasForeignKey("TimeslotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Group");

                    b.Navigation("School");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");

                    b.Navigation("Timeslot");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.LevelSubjectHours", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolLevel");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Note", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("ExamType");

                    b.Navigation("Group");

                    b.Navigation("School");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Parent", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("Dirassati_Backend.Data.Models.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Address", "Address")
                        .WithOne("School")
                        .HasForeignKey("Dirassati_Backend.Data.Models.School", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolType", "SchoolType")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.SchoolType", "SchoolType")
                        .WithMany("SchoolLevels")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolScheduleConfig", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", null)
                        .WithOne("ScheduleConfig")
                        .HasForeignKey("Dirassati_Backend.Data.Models.SchoolScheduleConfig", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("Dirassati_Backend.Data.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", "ParentRelationshipToStudentType")
                        .WithMany("Students")
                        .HasForeignKey("ParentRelationshipToStudentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Student")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", "Specialization")
                        .WithMany("Students")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Group");

                    b.Navigation("Parent");

                    b.Navigation("ParentRelationshipToStudentType");

                    b.Navigation("School");

                    b.Navigation("SchoolLevel");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentPayment", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Bill", "Bill")
                        .WithMany("StudentPayments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Parent", "Parent")
                        .WithMany("StudentPayments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Student", "Student")
                        .WithMany("StudentPayments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentReport", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Student", "Student")
                        .WithMany("StudentReports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.StudentReportStatus", "StudentReportStatus")
                        .WithMany("StudentReports")
                        .HasForeignKey("StudentReportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", "Teacher")
                        .WithMany("StudentReports")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentReportStatus");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.HasOne("Dirassati_Backend.Domain.Models.ContractType", "ContractType")
                        .WithMany("Teachers")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.TeacherAvailability", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", "Teacher")
                        .WithMany("Availabilities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Timeslot", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Timeslots")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSpecialization", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Address", b =>
                {
                    b.Navigation("School")
                        .IsRequired();
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Bill", b =>
                {
                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Classroom", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Parent", b =>
                {
                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.Navigation("AcademicYear")
                        .IsRequired();

                    b.Navigation("Classrooms");

                    b.Navigation("Employees");

                    b.Navigation("Groups");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("ScheduleConfig");

                    b.Navigation("Student");

                    b.Navigation("Teachers");

                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolType", b =>
                {
                    b.Navigation("SchoolLevels");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Specialization", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("StudentPayments");

                    b.Navigation("StudentReports");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.StudentReportStatus", b =>
                {
                    b.Navigation("StudentReports");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("StudentReports");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.ContractType", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
