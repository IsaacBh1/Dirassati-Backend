// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Dirassati_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250313135246_RefactorV1")]
    partial class RefactorV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Absence", b =>
                {
                    b.Property<Guid>("AbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTIme")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsJustified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("AbsenceId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AcademicYearId");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Address", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("ClassroomId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GorupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StreamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StreamId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Parent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalIdentityNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParentRelationshipToStudentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Père"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mère"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tuteur légal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Grand-parent"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Oncle/Tante"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Frère/Sœur majeur(e)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Autre famille"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("SchoolId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolConfig")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LevelId");

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("SchoolLevels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            LevelYear = 1,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 2,
                            LevelYear = 2,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 3,
                            LevelYear = 3,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 4,
                            LevelYear = 4,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 5,
                            LevelYear = 5,
                            SchoolTypeId = 1
                        },
                        new
                        {
                            LevelId = 6,
                            LevelYear = 1,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 7,
                            LevelYear = 2,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 8,
                            LevelYear = 3,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 9,
                            LevelYear = 4,
                            SchoolTypeId = 2
                        },
                        new
                        {
                            LevelId = 10,
                            LevelYear = 1,
                            SchoolTypeId = 3
                        },
                        new
                        {
                            LevelId = 11,
                            LevelYear = 2,
                            SchoolTypeId = 3
                        },
                        new
                        {
                            LevelId = 12,
                            LevelYear = 3,
                            SchoolTypeId = 3
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolType", b =>
                {
                    b.Property<int>("SchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchoolTypeId");

                    b.ToTable("SchoolTypes");

                    b.HasData(
                        new
                        {
                            SchoolTypeId = 1,
                            Name = "Primaire"
                        },
                        new
                        {
                            SchoolTypeId = 2,
                            Name = "Moyenne"
                        },
                        new
                        {
                            SchoolTypeId = 3,
                            Name = "Lycee"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            Name = "Science"
                        },
                        new
                        {
                            SpecializationId = 2,
                            Name = "Lettres"
                        },
                        new
                        {
                            SpecializationId = 3,
                            Name = "Gestion et Économie"
                        },
                        new
                        {
                            SpecializationId = 4,
                            Name = "Mathématiques"
                        },
                        new
                        {
                            SpecializationId = 5,
                            Name = "Sciences Expérimentales"
                        },
                        new
                        {
                            SpecializationId = 6,
                            Name = "Technique Mathématiques - Génie Civil"
                        },
                        new
                        {
                            SpecializationId = 7,
                            Name = "Technique Mathématiques - Génie Électrique"
                        },
                        new
                        {
                            SpecializationId = 8,
                            Name = "Technique Mathématiques - Génie Mécanique"
                        },
                        new
                        {
                            SpecializationId = 9,
                            Name = "Lettres et Philosophie"
                        },
                        new
                        {
                            SpecializationId = 10,
                            Name = "Langues Etrangeres"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentRelationshipToStudentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PhotoUrl")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentIdNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentRelationshipToStudentTypeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.ContractType", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContractId");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Level = 1,
                            Name = "général"
                        },
                        new
                        {
                            SubjectId = 2,
                            Level = 1,
                            Name = "Langue Française"
                        },
                        new
                        {
                            SubjectId = 3,
                            Level = 1,
                            Name = "Langue Anglaise"
                        },
                        new
                        {
                            SubjectId = 4,
                            Level = 1,
                            Name = "Tamazight"
                        },
                        new
                        {
                            SubjectId = 101,
                            Level = 2,
                            Name = "Histoire"
                        },
                        new
                        {
                            SubjectId = 102,
                            Level = 2,
                            Name = "Géographie"
                        },
                        new
                        {
                            SubjectId = 103,
                            Level = 2,
                            Name = "Éducation Islamique"
                        },
                        new
                        {
                            SubjectId = 104,
                            Level = 2,
                            Name = "Éducation Civique"
                        },
                        new
                        {
                            SubjectId = 105,
                            Level = 2,
                            Name = "Mathématiques"
                        },
                        new
                        {
                            SubjectId = 106,
                            Level = 2,
                            Name = "Sciences de la Nature et de la Vie"
                        },
                        new
                        {
                            SubjectId = 107,
                            Level = 2,
                            Name = "Sciences Physiques et Technologiques"
                        },
                        new
                        {
                            SubjectId = 108,
                            Level = 2,
                            Name = "Langue Arabe"
                        },
                        new
                        {
                            SubjectId = 109,
                            Level = 2,
                            Name = "Langue Tamazight"
                        },
                        new
                        {
                            SubjectId = 110,
                            Level = 2,
                            Name = "Langue Française"
                        },
                        new
                        {
                            SubjectId = 111,
                            Level = 2,
                            Name = "Langue Anglaise"
                        },
                        new
                        {
                            SubjectId = 112,
                            Level = 2,
                            Name = "EPS"
                        },
                        new
                        {
                            SubjectId = 113,
                            Level = 2,
                            Name = "Éducation Artistique"
                        },
                        new
                        {
                            SubjectId = 201,
                            Level = 3,
                            Name = "Économie et Management"
                        },
                        new
                        {
                            SubjectId = 202,
                            Level = 3,
                            Name = "Histoire"
                        },
                        new
                        {
                            SubjectId = 203,
                            Level = 3,
                            Name = "Géographie"
                        },
                        new
                        {
                            SubjectId = 204,
                            Level = 3,
                            Name = "Gestion Comptabilité et Finances"
                        },
                        new
                        {
                            SubjectId = 205,
                            Level = 3,
                            Name = "Mathématiques"
                        },
                        new
                        {
                            SubjectId = 206,
                            Level = 3,
                            Name = "Sciences Islamiques"
                        },
                        new
                        {
                            SubjectId = 207,
                            Level = 3,
                            Name = "Sciences de la Nature et de la Vie"
                        },
                        new
                        {
                            SubjectId = 208,
                            Level = 3,
                            Name = "Sciences Physiques"
                        },
                        new
                        {
                            SubjectId = 209,
                            Level = 3,
                            Name = "Philosophie"
                        },
                        new
                        {
                            SubjectId = 210,
                            Level = 3,
                            Name = "Droit"
                        },
                        new
                        {
                            SubjectId = 211,
                            Level = 3,
                            Name = "Espagnol"
                        },
                        new
                        {
                            SubjectId = 212,
                            Level = 3,
                            Name = "Allemand"
                        },
                        new
                        {
                            SubjectId = 213,
                            Level = 3,
                            Name = "Anglais"
                        },
                        new
                        {
                            SubjectId = 214,
                            Level = 3,
                            Name = "Italien"
                        },
                        new
                        {
                            SubjectId = 215,
                            Level = 3,
                            Name = "Français"
                        },
                        new
                        {
                            SubjectId = 216,
                            Level = 3,
                            Name = "Arabe"
                        },
                        new
                        {
                            SubjectId = 217,
                            Level = 3,
                            Name = "Tamazight"
                        },
                        new
                        {
                            SubjectId = 218,
                            Level = 3,
                            Name = "Informatique"
                        },
                        new
                        {
                            SubjectId = 219,
                            Level = 3,
                            Name = "Génie des Procédés"
                        },
                        new
                        {
                            SubjectId = 220,
                            Level = 3,
                            Name = "Génie Électrique"
                        },
                        new
                        {
                            SubjectId = 221,
                            Level = 3,
                            Name = "Génie Civil"
                        },
                        new
                        {
                            SubjectId = 222,
                            Level = 3,
                            Name = "Génie Mécanique"
                        },
                        new
                        {
                            SubjectId = 223,
                            Level = 3,
                            Name = "Éducation Physique et Sportive"
                        },
                        new
                        {
                            SubjectId = 224,
                            Level = 3,
                            Name = "Éducation Artistique"
                        },
                        new
                        {
                            SubjectId = 225,
                            Level = 3,
                            Name = "Technologie"
                        },
                        new
                        {
                            SubjectId = 226,
                            Level = 3,
                            Name = "Musique"
                        });
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.Teach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Teaches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolSpecialization", b =>
                {
                    b.Property<Guid>("SchoolsSchoolId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpecializationsSpecializationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolsSchoolId", "SpecializationsSpecializationId");

                    b.HasIndex("SpecializationsSpecializationId");

                    b.ToTable("SchoolSpecialization");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Absence", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Student", "Student")
                        .WithMany("Absences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithOne("AcademicYear")
                        .HasForeignKey("Dirassati_Backend.Data.Models.AcademicYear", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Classroom", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Classrooms")
                        .HasForeignKey("SchoolId")
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Employee", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Group", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.AcademicYear", "AcademicYear")
                        .WithMany("Groups")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "Level")
                        .WithMany("Groups")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Groups")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", "Stream")
                        .WithMany("Groups")
                        .HasForeignKey("StreamId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Level");

                    b.Navigation("School");

                    b.Navigation("Stream");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Parent", b =>
                {
                    b.HasOne("AppUser", "User")
                        .WithOne()
                        .HasForeignKey("Dirassati_Backend.Data.Models.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Address", "Address")
                        .WithOne("School")
                        .HasForeignKey("Dirassati_Backend.Data.Models.School", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", "ParentRelationshipToStudentType")
                        .WithMany("Students")
                        .HasForeignKey("ParentRelationshipToStudentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Student")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", "Specialization")
                        .WithMany("Students")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Parent");

                    b.Navigation("ParentRelationshipToStudentType");

                    b.Navigation("School");

                    b.Navigation("SchoolLevel");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.HasOne("Dirassati_Backend.Domain.Models.ContractType", "ContractType")
                        .WithMany("Teachers")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.Subject", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.Teach", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Domain.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSpecialization", b =>
                {
                    b.HasOne("Dirassati_Backend.Data.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dirassati_Backend.Data.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.AcademicYear", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Address", b =>
                {
                    b.Navigation("School");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.ParentRelationshipToStudentType", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.School", b =>
                {
                    b.Navigation("AcademicYear")
                        .IsRequired();

                    b.Navigation("Classrooms");

                    b.Navigation("Employees");

                    b.Navigation("Groups");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Student");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.SchoolLevel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Specialization", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Student", b =>
                {
                    b.Navigation("Absences");
                });

            modelBuilder.Entity("Dirassati_Backend.Data.Models.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Dirassati_Backend.Domain.Models.ContractType", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
